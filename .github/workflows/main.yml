# This is a basic workflow to help you get started with Actions

name: CLI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'release')"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Bump version
        id: bump_version
        uses: remorses/bump-version@js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version_file: ./VERSION
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set the current version env
        id: step_one
        run: |
            echo -n "current_version=" >> $GITHUB_ENV
            cat ./VERSION >> $GITHUB_ENV
            cat $GITHUB_ENV
            
      - name: Use the env value
        id: step_two
        run: |
            echo "${{ env.current_version }}" # This will output 'yellow'

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd cli
          go build
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.current_version }}
          release_name: Release ${{ env.current_version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./cli/dotsync-cli
          asset_name: dotsync-cli
          asset_content_type: application/octet-stream
          
